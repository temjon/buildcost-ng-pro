import { NextRequest, NextResponse } from 'next/server'
import { Document, Page, Text, View, StyleSheet, pdf } from '@react-pdf/renderer'
import { CostEstimate } from '@/lib/cost-calculator'

const styles = StyleSheet.create({
  page: {
    flexDirection: 'column',
    backgroundColor: '#FFFFFF',
    padding: 30,
  },
  header: {
    fontSize: 24,
    marginBottom: 20,
    textAlign: 'center',
    color: '#1f2937',
  },
  section: {
    margin: 10,
    padding: 10,
  },
  title: {
    fontSize: 16,
    marginBottom: 10,
    fontWeight: 'bold',
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 5,
    paddingBottom: 5,
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  totalRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 10,
    paddingTop: 10,
    borderTopWidth: 2,
    borderTopColor: '#374151',
    fontSize: 18,
    fontWeight: 'bold',
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 30,
    right: 30,
    textAlign: 'center',
    fontSize: 10,
    color: '#6b7280',
  },
})

interface PDFData {
  estimate: CostEstimate
  projectDetails: {
    area: number
    location: string
    finish: string
    date: string
  }
}

const CostEstimatePDF = ({ estimate, projectDetails }: PDFData) => (
  <Document>
    <Page size="A4" style={styles.page}>
      <Text style={styles.header}>BuildCost NG Pro - Cost Estimate</Text>
      
      <View style={styles.section}>
        <Text style={styles.title}>Project Details</Text>
        <View style={styles.row}>
          <Text>Area:</Text>
          <Text>{projectDetails.area} m²</Text>
        </View>
        <View style={styles.row}>
          <Text>Location:</Text>
          <Text>{projectDetails.location}</Text>
        </View>
        <View style={styles.row}>
          <Text>Finish Level:</Text>
          <Text>{projectDetails.finish}</Text>
        </View>
        <View style={styles.row}>
          <Text>Date:</Text>
          <Text>{projectDetails.date}</Text>
        </View>
      </View>

      <View style={styles.section}>
        <Text style={styles.title}>Cost Summary</Text>
        <View style={styles.row}>
          <Text>Estimated Cost:</Text>
          <Text>₦{estimate.total.toLocaleString()}</Text>
        </View>
        <View style={styles.row}>
          <Text>Low Estimate:</Text>
          <Text>₦{estimate.low.toLocaleString()}</Text>
        </View>
        <View style={styles.row}>
          <Text>High Estimate:</Text>
          <Text>₦{estimate.high.toLocaleString()}</Text>
        </View>
        <View style={styles.row}>
          <Text>Confidence Level:</Text>
          <Text>{(estimate.confidence * 100).toFixed(0)}%</Text>
        </View>
      </View>

      <View style={styles.section}>
        <Text style={styles.title}>Cost Breakdown</Text>
        {estimate.items.map((item, index) => (
          <View key={index} style={styles.row}>
            <Text>{item.category}</Text>
            <Text>₦{item.total.toLocaleString()}</Text>
          </View>
        ))}
      </View>

      <View style={styles.section}>
        <Text style={styles.title}>Material Requirements</Text>
        {estimate.materials.map((material, index) => (
          <View key={index} style={styles.row}>
            <Text>{material.item} ({material.quantity} {material.unit})</Text>
            <Text>₦{material.total.toLocaleString()}</Text>
          </View>
        ))}
      </View>

      <Text style={styles.footer}>
        Generated by BuildCost NG Pro - Nigerian Construction Cost Estimator
        {'\n'}This estimate is based on 2025 market data and includes ±10% accuracy range
      </Text>
    </Page>
  </Document>
)

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { estimate, projectDetails } = body as PDFData
    
    const pdfDoc = <CostEstimatePDF estimate={estimate} projectDetails={projectDetails} />
    const pdfBuffer = await pdf(pdfDoc).toBuffer()
    
    return new NextResponse(pdfBuffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="cost-estimate-${Date.now()}.pdf"`,
      },
    })
  } catch (error) {
    console.error('Error generating PDF:', error)
    return NextResponse.json(
      { error: 'Failed to generate PDF' },
      { status: 500 }
    )
  }
}